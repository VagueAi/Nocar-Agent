import random
import json
from typing import Dict, List, Any

class AI_Agent:
    def __init__(self):
        # Load pre-defined knowledge or data
        self.knowledge_base = self.load_knowledge_base()
        
        # Initialize NLP capabilities (simulated)
        self.nlp_processor = NLP_Processor()
        
        # Task management system
        self.tasks = []
    
    def load_knowledge_base(self) -> Dict[str, Any]:
        # In a real scenario, this would load from a database or file
        return {
            "greetings": ["Hello!", "Hi there!", "Welcome!"],
            "farewells": ["Goodbye!", "See you later!", "Take care!"],
            "answers": {
                "What's your name?": "My name is VagueAI.",
                "How are you?": "I'm doing well, thanks for asking!",
                "What is AI?": "AI stands for Artificial Intelligence. It's the simulation of human intelligence processes by computer systems."
            }
        }

    def process_input(self, user_input: str) -> str:
        # Simulate NLP processing
        intent = self.nlp_processor.understand_intent(user_input)
        
        if intent == "greeting":
            return random.choice(self.knowledge_base["greetings"])
        elif intent == "farewell":
            return random.choice(self.knowledge_base["farewells"])
        elif intent == "question":
            return self.answer_question(user_input)
        elif intent == "task":
            return self.manage_task(user_input)
        else:
            return "I'm not sure how to respond to that. Can you rephrase or ask something else?"

    def answer_question(self, question: str) -> str:
        # Here, we're just doing a simple lookup. In a real scenario, this would involve more complex logic or machine learning.
        return self.knowledge_base["answers"].get(question, "I don't have that information. Can I help with something else?")

    def manage_task(self, task_description: str) -> str:
        # Add the task to the list
        self.tasks.append(task_description)
        return f"Task '{task_description}' added to your to-do list."

    def get_tasks(self) -> str:
        if not self.tasks:
            return "You have no tasks currently."
        return "Your tasks are:\n" + "\n".join([f"{i+1}. {task}" for i, task in enumerate(self.tasks)])

    def remove_task(self, task_index: int) -> str:
        if 1 <= task_index <= len(self.tasks):
            removed_task = self.tasks.pop(task_index - 1)
            return f"Task '{removed_task}' has been removed."
        else:
            return "Invalid task number."

class NLP_Processor:
    def __init__(self):
        # Here, we'd initialize an actual NLP model, but for simplicity:
        self.intents = {
            "greeting": ["hello", "hi", "hey", "greetings"],
            "farewell": ["bye", "goodbye", "see you"],
            "question": ["what", "who", "where", "when", "why", "how"],
            "task": ["add", "task", "do", "remember"]
        }

    def understand_intent(self, text: str) -> str:
        # This is a very basic intent detection. In reality, you'd use a trained NLP model.
        for intent, keywords in self.intents.items():
            if any(keyword in text.lower() for keyword in keywords):
                return intent
        return "unknown"

# Example usage
if __name__ == "__main__":
    agent = AI_Agent()
    
    # Simulating a conversation
    print(agent.process_input("Hello!"))
    print(agent.process_input("What is AI?"))
    print(agent.process_input("Add buy groceries to my tasks"))
    print(agent.get_tasks())
    print(agent.process_input("Goodbye!"))
